{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Professor Sathish Academy","text":""},{"location":"C_Prog/01/","title":"What is C ?","text":"<p>C is a general-purpose, procedural programming language created by Dennis Ritchie in the early 1970s. It is known for:</p> <ul> <li> <p>Efficiency: C allows low-level memory manipulation and gives you fine-grained control over how your code interacts with the hardware.</p> </li> <li> <p>Portability: Well-written C programs can be compiled to run on a variety of hardware platforms with minimal changes.</p> </li> <li> <p>Influence: Many popular languages (C++, Java, C#, Objective-C) trace their syntax and concepts back to C.</p> </li> </ul>"},{"location":"C_Prog/02/","title":"Which C are we learning ?","text":"<p>In most modern references, you will be learning standard C (sometimes called \u201cANSI C\u201d or \u201cISO C\u201d)\u2014this refers to the C language as defined by the ISO standards committee. Over the years, C has been standardized multiple times:</p> <ul> <li> <p>C89/C90: The first standardized version of C (ANSI/ISO).</p> </li> <li> <p>C99: Introduced features like variable-length arrays, inline functions, and improved support for inline assembly.</p> </li> <li> <p>C11: Focused on concurrency and some improvements to the standard library.</p> </li> <li> <p>C17: Mostly a bug-fix release over C11.</p> </li> <li> <p>C23: The newest revision adds minor features and clarifications, though not yet widespread.</p> </li> </ul> <p>Despite these versions, the fundamental principles of C remain consistent. </p> <p>Beginners typically learn a version that\u2019s close to C99 or C11. </p> <p>Most compilers today default to at least C99 or C11 by default.</p>"},{"location":"C_Prog/03/","title":"Getting Started with C","text":""},{"location":"C_Prog/03/#install-a-c-compiler","title":"Install a C Compiler","text":"<ul> <li> <p>GCC (GNU Compiler Collection): Very common on Linux and available for Windows (via MinGW or Cygwin) and macOS (via Homebrew).</p> </li> <li> <p>Clang: Another widely used compiler, often the default on macOS.</p> </li> <li> <p>Microsoft Visual C++: Bundled with Microsoft\u2019s development tools for Windows.</p> </li> </ul>"},{"location":"C_Prog/03/#choose-an-editor-or-ide","title":"Choose an Editor or IDE","text":"<ul> <li> <p>Suggested Text Editor : Visual Studio Code.</p> </li> <li> <p>Suggested IDE : Code::Blocks.</p> </li> </ul>"},{"location":"C_Prog/03/#download-minggw","title":"Download MingGW :","text":"<p>A native Windows port of the GNU Compiler Collection (GCC), with freely distributable import libraries and header files for building native Windows applications; includes extensions to the MSVC runtime to support C99 functionality. All of MinGW's software will execute on the 64bit Windows platforms.</p> <p>Download MinGW</p>"},{"location":"C_Prog/03/#installation-guide-for-minggw","title":"Installation Guide for MingGW :","text":"<ol> <li>Download the Installer :<ul> <li>Go to the MinGW SourceForge page or (historically) the MinGW website.</li> <li>Look for the mingw-get-setup.exe or any official installer.</li> </ul> </li> </ol> <p>2.Run the Installer :</p> <ul> <li> <p>Choose components:</p> </li> <li> <p>mingw32-base: The basic setup with the GCC compiler.</p> </li> <li>mingw32-gcc-g++: Adds C++ compiler support (if you need C++).</li> <li>mingw32-gdb: GNU Debugger.</li> <li>msys-base: MSYS shell for make and related tools.</li> </ul> <p>3.Install to a directory (e.g., C:\\MinGW).</p> <p>4.Set Environment Variables.(Windows OS)</p> <ul> <li>Add the bin folder (e.g., C:\\MinGW\\bin) to your system\u2019s PATH.</li> <li>Start Menu \u2192 Edit the system environment variables.</li> <li>Click Environment Variables\u2026.</li> <li>Under System variables, select Path, then Edit\u2026, and add C:\\MinGW\\bin.</li> </ul> <p>5.Verify by opening Command Prompt or PowerShell and typing. <pre><code>gcc --version\n</code></pre> You should see GCC version information if everything is set up correctly.</p>"},{"location":"C_Prog/03/#software-download","title":"Software Download","text":"<ul> <li>Text Editor Download Vs Code</li> <li>IDE Download Code Blocks</li> </ul>"},{"location":"C_Prog/04/","title":"Alphabets,Digits and Special Symbols","text":"<p>Character Sets in C</p> <ol> <li> <p>Alphabets : Uppercase Letters: A to Z (ASCII values 65 to 90) Lowercase Letters: a to z (ASCII values 97 to 122)</p> </li> <li> <p>Digits : Digits: 0 to 9 (ASCII values 48 to 57)</p> </li> <li> <p>Special Symbols : Characters that are neither letters nor digits. Examples include punctuation (., ,, ;, ?, etc.), operators (+, -, *, /), brackets ((, ), {, }, []), etc.</p> </li> </ol>"},{"location":"C_Prog/04/#checking-characters-in-c","title":"Checking Characters in C","text":"<p>Method 1: Using ASCII Values</p> <p>You can check whether a character ch is a letter, digit, or special symbol by comparing its ASCII code:</p> <pre><code>if (ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z') {\n    // ch is uppercase alphabet\n} else if (ch &gt;= 'a' &amp;&amp; ch &lt;= 'z') {\n    // ch is lowercase alphabet\n} else if (ch &gt;= '0' &amp;&amp; ch &lt;= '9') {\n    // ch is a digit\n} else {\n    // ch is a special symbol\n}\n</code></pre>"},{"location":"C_Prog/04/#method-2-using-the-ctypeh-library","title":"Method 2: Using the &lt; ctype.h &gt; Library","text":"<p>C provides convenient functions in &lt; ctype.h &gt; to classify characters:</p> <ul> <li>isalpha(ch) \u2013 checks if ch is a letter (A\u2013Z, a\u2013z).</li> <li>isdigit(ch) \u2013 checks if ch is a digit (0\u20139).</li> <li>isalnum(ch) \u2013 checks if ch is alphanumeric (letters or digits).</li> <li>ispunct(ch) \u2013 checks if ch is a punctuation character.</li> <li>isspace(ch) \u2013 checks if ch is a whitespace character (spaces, tabs, etc.).</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;ctype.h&gt;\n\nint main(void) {\n    char ch;\n    printf(\"Enter any character: \");\n    scanf(\"%c\", &amp;ch);\n\n    if (isalpha(ch)) {\n        printf(\"'%c' is an alphabet.\\n\", ch);\n    } else if (isdigit(ch)) {\n        printf(\"'%c' is a digit.\\n\", ch);\n    } else {\n        printf(\"'%c' is a special symbol.\\n\", ch);\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"C_Prog/04/#how-it-works","title":"How it Works :","text":"<p>User Input: Reads a single character using scanf(\"%c\", &amp;ch).</p> <p>Check Uppercase: If ASCII code is in the range 65 to 90 ('A' to 'Z').</p> <p>Check Lowercase: If ASCII code is in the range 97 to 122 ('a' to 'z').</p> <p>Check Digit: If ASCII code is in the range 48 to 57 ('0' to '9').</p> <p>Otherwise: It falls under special symbols.</p>"},{"location":"C_Prog/04/#summary","title":"Summary:","text":"<p>Alphabets in ASCII:</p> <p>1.'A'\u2013'Z': 65\u201390.</p> <p>2.'a'\u2013'z': 97\u2013122</p> <p>Digits in ASCII : </p> <p>'0'\u2013'9': 48\u201357</p> <p>Special symbols: Everything else (punctuation, math symbols, whitespace, etc.).</p> <p>To classify characters, you can compare ASCII values directly or use the convenient functions in the &lt; ctype.h &gt; library (like isalpha, isdigit, etc.).</p>"},{"location":"C_Prog/05/","title":"Constants,Variables and Keywords","text":"<p>In C programming, constants, variables, and keywords are three core concepts that work together to define and manipulate data. </p>"},{"location":"C_Prog/05/#overview","title":"Overview","text":"<ul> <li>Constants: Fixed values that cannot be changed during program execution.  </li> <li>Variables: Named storage locations that can hold values which may change over time.  </li> <li>Keywords: Reserved words in C with special meanings, not usable as identifiers (variable names, function names, etc.).</li> </ul>"},{"location":"C_Prog/05/#constants","title":"Constants","text":"<p>Definition    - A constant is a literal or symbolic value that remains the same throughout the program.</p> <p>Types    - Integer Constants (e.g., <code>5</code>, <code>-10</code>, <code>0xFF</code>, <code>013</code>)    - Floating-Point Constants (e.g., <code>3.14</code>, <code>2e5</code>)    - Character Constants (e.g., <code>'A'</code>, <code>'\\n'</code>)    - String Literals (e.g., <code>\"Hello\"</code>, <code>\"World\"</code>)    - Symbolic Constants using <code>#define</code> or <code>const</code> (e.g., <code>#define MAX 100</code> or <code>const int max = 100;</code>)</p> <p>Usage Example <pre><code>#define PI 3.14159\n\nint main(void) {\n    const int FIXED_VALUE = 10;\n    // PI and FIXED_VALUE won't change during the program's execution\n    return 0;\n}\n</code></pre></p> Aspect Constants Variables Keywords Definition Fixed values that do not change at runtime Named memory locations that can hold mutable values Reserved words with special meaning Example <code>#define PI 3.14</code>, <code>const int MAX = 100;</code> <code>int age = 25;</code>, <code>float height;</code> <code>if</code>, <code>else</code>, <code>int</code>, <code>return</code>, <code>for</code>, etc. Mutability Immutable after definition Mutable throughout the program Not applicable (cannot be used as variable/function names, and their meaning can\u2019t be altered) Usage Context Used for fixed values (e.g., mathematical constants, settings) Used whenever a value must be stored and potentially modified Used to define structure and behavior of the program (e.g., data types, control flow, memory specifiers)"},{"location":"C_Prog/06/","title":"Types of Constants","text":"<p>This document provides an overview of how constants, variables, and keywords work in C programming.</p>"},{"location":"C_Prog/06/#constants","title":"Constants","text":"<p>In C, constants represent fixed values that cannot be altered during the program\u2019s execution. They can be any of the basic data types (integers, floating-point numbers, characters, etc.).</p>"},{"location":"C_Prog/06/#types-of-constants_1","title":"Types of Constants","text":"<p>Integer Constants    - Written without fractional parts.    - Examples: <code>0</code>, <code>1234</code>, <code>-99</code>, <code>0xFA</code> (hexadecimal), <code>010</code> (octal).</p> <p>Floating-Point (Real) Constants    - Contain a decimal point or are written in exponential (scientific) notation.    - Examples: <code>3.14</code>, <code>-0.001</code>, <code>2e5</code> (which means <code>2 \u00d7 10^5</code>).</p> <p>Character Constants    - Enclosed in single quotes <code>''</code>.    - Examples: <code>'A'</code>, <code>'z'</code>, <code>'\\n'</code> (newline), <code>'\\t'</code> (tab).</p> <p>String Constants (String Literals)    - Enclosed in double quotes <code>\"\"</code>.    - Examples: <code>\"Hello\"</code>, <code>\"C Programming\"</code>, <code>\"123\"</code> (though this is a string, not an integer).</p> <p>Symbolic Constants (via <code>#define</code>)    - Defined at compile time using the C Preprocessor.    - Example:</p> <pre><code> ```c\n #define PI 3.14159\n ```\n</code></pre>"},{"location":"C_Prog/06/#examples-of-constant-declarations","title":"Examples of Constant Declarations","text":"<pre><code>#include &lt;stdio.h&gt;\n\n#define MAX_LENGTH 100  // Symbolic constant\n\nint main(void) {\n    const int count = 10;   // count is a constant integer\n    const char letter = 'A'; // letter is a constant character\n\n    // The following lines would cause errors if uncommented:\n    // count = 20;  // error: assignment of read-only variable\n    // letter = 'B'; // error: assignment of read-only variable\n\n    printf(\"MAX_LENGTH = %d\\n\", MAX_LENGTH);\n    printf(\"count = %d\\n\", count);\n    printf(\"letter = %c\\n\", letter);\n\n    return 0;\n}\n</code></pre>"},{"location":"C_Prog/07/","title":"Rules for Constructing Integer Constants","text":"<p>Integer constants in C represent whole numbers (no decimal or fractional parts) and can be written in decimal, octal, or hexadecimal notation. This document outlines the general rules for creating valid integer constants, including optional prefixes and suffixes.</p>"},{"location":"C_Prog/07/#1-basic-forms","title":"1. Basic Forms","text":""},{"location":"C_Prog/07/#11-decimal-constants","title":"1.1 Decimal Constants","text":"<ul> <li>Composed of digits 0\u20139.</li> <li>Must not begin with 0 unless the constant is exactly <code>0</code>.</li> <li>Examples:</li> <li><code>123</code></li> <li><code>0</code> (special case)</li> <li><code>9456</code></li> </ul>"},{"location":"C_Prog/07/#12-octal-constants","title":"1.2 Octal Constants","text":"<ul> <li>Indicated by a leading <code>0</code> (zero).</li> <li>Composed of digits 0\u20137 only.</li> <li>Examples:</li> <li><code>0123</code> (equivalent to decimal 83)</li> <li><code>0777</code> (equivalent to decimal 511)</li> </ul>"},{"location":"C_Prog/07/#13-hexadecimal-constants","title":"1.3 Hexadecimal Constants","text":"<ul> <li>Indicated by a leading <code>0x</code> or <code>0X</code>.</li> <li>Composed of digits 0\u20139 and letters A\u2013F or a\u2013f.</li> <li>Examples:</li> <li><code>0x1A</code> (equivalent to decimal 26)</li> <li><code>0XFF</code> (equivalent to decimal 255)</li> <li><code>0x7beef</code></li> </ul>"},{"location":"C_Prog/07/#2-sign-and-negative-numbers","title":"2. Sign and Negative Numbers","text":"<ul> <li>Integer constants themselves are always non-negative.  </li> <li>A negative integer (e.g., <code>-10</code>) is treated as the unary minus operator applied to the positive constant <code>10</code>.</li> </ul> <pre><code>int x = -10;  // Here, the literal is 10; the '-' is an operator.\n</code></pre>"},{"location":"C_Prog/07/#3-optional-type-suffixes","title":"3. Optional Type Suffixes","text":"<p>C allows suffixes to specify the type (e.g., long, unsigned, long long). Common suffixes include.</p> <ul> <li>u or U for unsigned</li> <li>l or L for long</li> <li>ll or LL for long long</li> </ul> <p>You can combine them as appropriate. Some examples:</p> <ul> <li>10U \u2192 unsigned int</li> <li>10L \u2192 long int</li> <li>10UL \u2192 unsigned long int</li> <li>10LL \u2192 long long int</li> <li>10ULL \u2192 unsigned long long int</li> </ul> <pre><code>123U   // unsigned int\n0777L  // long int (octal)\n0xFFull // unsigned long long int (hex)\n</code></pre>"},{"location":"C_Prog/07/#4-invalid-forms","title":"4. Invalid Forms","text":"<ol> <li> <p>Leading zero in a decimal constant (e.g., 0129) is invalid because it suggests octal notation, and 9 is not a valid octal digit.</p> </li> <li> <p>Underscores (like in some other languages) are not allowed (e.g., 1_000 is invalid in C).</p> </li> <li> <p>Non-hex letters in a hex constant (e.g., 0xG1) is invalid. Whitespace within the constant (e.g., 12 34) is invalid.</p> </li> </ol>"},{"location":"C_Prog/07/#5-examples-of-valid-integer-constants","title":"5. Examples of Valid Integer Constants","text":"<p>1.Decimal: 0, 15, 999, 2023U, 3000000000UL.</p> <p>2.Octal: 0777, 0644, 032LL.</p> <p>3.Hexadecimal: 0x1F, 0XAF, 0x7fff, 0xCAFEBABELL.</p>"},{"location":"C_Prog/07/#6-quick-reference","title":"6. Quick Reference","text":"<ul> <li>Decimal: [1-9][0-9]* or just 0 .</li> <li>Octal: 0[0-7]* .</li> <li>Hex: 0[xX][0-9a-fA-F]+ .</li> <li>Suffixes: (u|U)?(l|L)?(l|L)? (in various valid combinations).</li> <li>Negative Integers: Use unary minus: -10 (the literal is 10, preceded by - operator).</li> </ul>"},{"location":"C_Prog/08/","title":"Rules for Constructing Real Constants","text":""},{"location":"C_Prog/09/","title":"Types of C Variables","text":""},{"location":"C_Prog/10/","title":"Rules for Constructing Variable Names","text":""},{"location":"C_Prog/11/","title":"C Keywords","text":""},{"location":"C_Prog/12/","title":"The First C Program","text":""},{"location":"C_Prog/13/","title":"Form of a C Program","text":""},{"location":"C_Prog/14/","title":"Comments in a C Program","text":""},{"location":"C_Prog/15/","title":"What is main() ?","text":""},{"location":"C_Prog/16/","title":"Variables and their usage","text":""},{"location":"C_Prog/17/","title":"printf() and its purpose","text":""},{"location":"C_Prog/18/","title":"Compilation and Execution","text":""},{"location":"C_Prog/19/","title":"Receiving Input","text":""},{"location":"C_Prog/20/","title":"Programs for practice","text":""}]}